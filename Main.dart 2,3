import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:provider/provider.dart';


void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  
  try {
    await Firebase.initializeApp(
      options: const FirebaseOptions(
        apiKey: "AIzaSyCdrG7Cxd2szNQPCN3rS120kYqRrreT1rE",
        authDomain: "tiendapet-bd5fa.firebaseapp.com",
        projectId: "tiendapet-bd5fa",
        storageBucket: "tiendapet-bd5fa.appspot.com",
        messagingSenderId: "604637774741",
        appId: "1:604637774741:web:8897ae0d4350322334ac9c",
      ),
    );
    
    // Verificación adicional de conexión
    try {
      await FirebaseFirestore.instance.collection('test').doc('test').get();
      runApp(const MyApp(firestoreConnected: true));
    } catch (e) {
      print('Error verificando conexión: $e');
      runApp(const MyApp(firestoreConnected: false));
    }
  } catch (e) {
    print('Error inicializando Firebase: $e');
    runApp(const MyApp(firestoreConnected: false));
  }
}

class MyApp extends StatelessWidget {
  final bool firestoreConnected;
  
  const MyApp({super.key, required this.firestoreConnected});

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        ChangeNotifierProvider(
          create: (_) => InventoryProvider(firestoreConnected: firestoreConnected),
        ),
        ChangeNotifierProvider(create: (_) => CartProvider()),
      ],
      child: MaterialApp(
        debugShowCheckedModeBanner: false,
        title: 'Tienda de Mascotas',
        theme: ThemeData(
          primarySwatch: Colors.blue,
          visualDensity: VisualDensity.adaptivePlatformDensity,
        ),
        home: WelcomeScreen(firestoreConnected: firestoreConnected),
        routes: {
          '/home': (context) => const HomeScreen(),
          '/inventory': (context) => const InventoryScreen(),
          '/animal_menu': (context) => const AnimalMenuScreen(),
          '/cart': (context) => const CartScreen(),
        },
      ),
    );
  }
}

class WelcomeScreen extends StatelessWidget {
  final bool firestoreConnected;
  
  const WelcomeScreen({super.key, required this.firestoreConnected});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Tienda de Mascotas'),
        actions: [
          Tooltip(
            message: firestoreConnected 
              ? 'Conectado a Firebase' 
              : 'Modo offline - Sin conexión a Firebase',
            child: Icon(
              firestoreConnected ? Icons.cloud_done : Icons.cloud_off,
              color: firestoreConnected ? Colors.green : Colors.orange,
            ),
          ),
          const SizedBox(width: 16),
        ],
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const FlutterLogo(size: 100),
            const SizedBox(height: 32),
            Text(
              'Bienvenido a la Tienda de Mascotas',
              style: Theme.of(context).textTheme.headlineSmall,
            ),
            const SizedBox(height: 16),
            Text(
              firestoreConnected
                ? 'Estado: Conectado a la nube'
                : 'Estado: Usando datos locales',
              style: TextStyle(
                color: firestoreConnected ? Colors.green : Colors.orange,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 32),
            ElevatedButton(
              onPressed: () {
                Navigator.pushNamed(context, '/home');
              },
              style: ElevatedButton.styleFrom(
                padding: const EdgeInsets.symmetric(horizontal: 40, vertical: 16),
              ),
              child: const Text('Iniciar', style: TextStyle(fontSize: 18)),
            ),
          ],
        ),
      ),
    );
  }
}

// Modelos y Providers
class Animal {
  final String id;
  final String name;
  final String breed;
  final int price;
  final String size;
  String imageUrl;
  int quantity;

  Animal({
    required this.id,
    required this.name,
    required this.breed,
    required this.price,
    required this.size,
    required this.imageUrl,
    required this.quantity,
  });

  factory Animal.fromFirestore(DocumentSnapshot doc) {
    Map data = doc.data() as Map;
    return Animal(
      id: doc.id,
      name: data['name'] ?? '',
      breed: data['breed'] ?? '',
      price: (data['price'] ?? 0).toInt(),
      size: data['size'] ?? '',
      imageUrl: data['imageUrl'] ?? '',
      quantity: (data['quantity'] ?? 0).toInt(),
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'name': name,
      'breed': breed,
      'price': price,
      'size': size,
      'imageUrl': imageUrl,
      'quantity': quantity,
      'last_update': FieldValue.serverTimestamp(),
    };
  }
}

class InventoryProvider with ChangeNotifier {
  final FirebaseFirestore _db = FirebaseFirestore.instance;
  final bool firestoreConnected;
  List<Animal> _animals = [];
  bool _isLoading = true;
  String _error = '';

  InventoryProvider({required this.firestoreConnected}) {
    _loadAnimals();
  }

  List<Animal> get animals => _animals;
  bool get isLoading => _isLoading;
  String get error => _error;

  Future<void> _loadAnimals() async {
    try {
      _isLoading = true;
      notifyListeners();

      if (firestoreConnected) {
        final snapshot = await _db.collection('animals').get();
        _animals = snapshot.docs.map((doc) => Animal.fromFirestore(doc)).toList();
      } else {
        // Datos locales de ejemplo
        _animals = [
          Animal(
            id: '1',
            name: 'Gato',
            breed: 'Naranja',
            price: 200,
            size: 'Pequeño',
            imageUrl: 'lib/assets/gatito.jpeg',
            quantity: 10,
          ),
          Animal(
            id: '2',
            name: 'Perro',
            breed: 'Labrador',
            price: 300,
            size: 'Mediano',
            imageUrl: 'lib/assets/perro.jpeg',
            quantity: 5,
          ),
        ];
      }
      
      _error = '';
    } catch (e) {
      _error = 'Error cargando animales: $e';
      print(_error);
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  Future<void> updateAnimal(Animal updatedAnimal) async {
    try {
      if (firestoreConnected) {
        await _db.collection('animals').doc(updatedAnimal.id).update(updatedAnimal.toMap());
      }
      
      final index = _animals.indexWhere((a) => a.id == updatedAnimal.id);
      if (index != -1) {
        _animals[index] = updatedAnimal;
        notifyListeners();
      }
    } catch (e) {
      print('Error actualizando animal: $e');
      throw Exception('Error al actualizar');
    }
  }
}

class CartItem {
  final Animal animal;
  int quantity;

  CartItem({
    required this.animal,
    this.quantity = 1,
  });

  int get totalPrice => animal.price * quantity;
}

class CartProvider with ChangeNotifier {
  final List<CartItem> _items = [];

  List<CartItem> get items => _items;
  int get itemCount => _items.fold(0, (sum, item) => sum + item.quantity);
  int get totalPrice => _items.fold(0, (sum, item) => sum + item.totalPrice);

  void addToCart(Animal animal) {
    final existingIndex = _items.indexWhere((item) => item.animal.id == animal.id);
    
    if (existingIndex >= 0) {
      _items[existingIndex].quantity++;
    } else {
      _items.add(CartItem(animal: animal));
    }
    
    notifyListeners();
  }

  void removeFromCart(String animalId) {
    _items.removeWhere((item) => item.animal.id == animalId);
    notifyListeners();
  }

  void updateQuantity(String animalId, int newQuantity) {
    final index = _items.indexWhere((item) => item.animal.id == animalId);
    if (index != -1) {
      _items[index].quantity = newQuantity;
      notifyListeners();
    }
  }

  void clearCart() {
    _items.clear();
    notifyListeners();
  }
}

// Pantallas principales (resumidas por brevedad)
class HomeScreen extends StatelessWidget {
  const HomeScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Menú Principal')),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            ElevatedButton(
              onPressed: () => Navigator.pushNamed(context, '/inventory'),
              child: const Text('Administrar Inventario'),
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: () => Navigator.pushNamed(context, '/animal_menu'),
              child: const Text('Tienda de Mascotas'),
            ),
          ],
        ),
      ),
    );
  }
}

class InventoryScreen extends StatelessWidget {
  const InventoryScreen({super.key});

  @override
  Widget build(BuildContext context) {
    final inventory = Provider.of<InventoryProvider>(context);
    
    if (inventory.isLoading) {
      return const Center(child: CircularProgressIndicator());
    }
    
    if (inventory.error.isNotEmpty) {
      return Center(child: Text(inventory.error));
    }

    return Scaffold(
      appBar: AppBar(title: const Text('Inventario')),
      body: ListView.builder(
        itemCount: inventory.animals.length,
        itemBuilder: (context, index) {
          final animal = inventory.animals[index];
          return ListTile(
            title: Text(animal.name),
            subtitle: Text('Stock: ${animal.quantity} | Precio: \$${animal.price}'),
            trailing: IconButton(
              icon: const Icon(Icons.edit),
              onPressed: () => _showEditDialog(context, animal, inventory),
            ),
          );
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () => _showAddDialog(context, inventory),
        child: const Icon(Icons.add),
      ),
    );
  }

  void _showEditDialog(BuildContext context, Animal animal, InventoryProvider inventory) {
    // Implementar diálogo de edición
  }

  void _showAddDialog(BuildContext context, InventoryProvider inventory) {
    // Implementar diálogo para agregar
  }
}

class AnimalMenuScreen extends StatelessWidget {
  const AnimalMenuScreen({super.key});

  @override
  Widget build(BuildContext context) {
    final inventory = Provider.of<InventoryProvider>(context);
    final cart = Provider.of<CartProvider>(context);

    return Scaffold(
      appBar: AppBar(
        title: const Text('Tienda de Mascotas'),
        actions: [
          Badge(
            label: Text('${cart.itemCount}'),
            child: IconButton(
              icon: const Icon(Icons.shopping_cart),
              onPressed: () => Navigator.pushNamed(context, '/cart'),
            ),
          ),
        ],
      ),
      body: inventory.isLoading
          ? const Center(child: CircularProgressIndicator())
          : GridView.builder(
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
                childAspectRatio: 0.8,
              ),
              itemCount: inventory.animals.length,
              itemBuilder: (context, index) {
                final animal = inventory.animals[index];
                return Card(
                  child: Column(
                    children: [
                      Expanded(child: Image.network(animal.imageUrl)),
                      Text(animal.name),
                      Text('\$${animal.price}'),
                      ElevatedButton(
                        onPressed: () => cart.addToCart(animal),
                        child: const Text('Agregar'),
                      ),
                    ],
                  ),
                );
              },
            ),
    );
  }
}

class CartScreen extends StatelessWidget {
  const CartScreen({super.key});

  @override
  Widget build(BuildContext context) {
    final cart = Provider.of<CartProvider>(context);

    return Scaffold(
      appBar: AppBar(title: const Text('Carrito de Compras')),
      body: cart.items.isEmpty
          ? const Center(child: Text('El carrito está vacío'))
          : Column(
              children: [
                Expanded(
                  child: ListView.builder(
                    itemCount: cart.items.length,
                    itemBuilder: (context, index) {
                      final item = cart.items[index];
                      return ListTile(
                        title: Text(item.animal.name),
                        subtitle: Text('Cantidad: ${item.quantity}'),
                        trailing: Text('\$${item.totalPrice}'),
                      );
                    },
                  ),
                ),
                Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text(
                        'Total: \$${cart.totalPrice}',
                        style: const TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
                      ),
                      ElevatedButton(
                        onPressed: () {
                          // Procesar compra
                          cart.clearCart();
                          ScaffoldMessenger.of(context).showSnackBar(
                            const SnackBar(content: Text('Compra realizada con éxito')),
                          );
                        },
                        child: const Text('Comprar'),
                      ),
                    ],
                  ),
                ),
              ],
            ),
    );
  }
}
