import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:provider/provider.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  
  try {
    await Firebase.initializeApp(
      options: const FirebaseOptions(
        apiKey: "AIzaSyCdrG7Cxd2szNQPCN3rS120kYqRrreT1rE",
        authDomain: "tiendapet-bd5fa.firebaseapp.com",
        projectId: "tiendapet-bd5fa",
        storageBucket: "tiendapet-bd5fa.appspot.com",
        messagingSenderId: "604637774741",
        appId: "1:604637774741:web:8897ae0d4350322334ac9c",
      ),
    );
    
    // Verificación adicional de conexión
    try {
      await FirebaseFirestore.instance.collection('animals').get();
      runApp(const MyApp(firestoreConnected: true));
    } catch (e) {
      print('Error verificando conexión: $e');
      runApp(const MyApp(firestoreConnected: false));
    }
  } catch (e) {
    print('Error inicializando Firebase: $e');
    runApp(const MyApp(firestoreConnected: false));
  }
}

class MyApp extends StatelessWidget {
  final bool firestoreConnected;
  
  const MyApp({super.key, required this.firestoreConnected});

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        ChangeNotifierProvider(
          create: (_) => InventoryProvider(firestoreConnected: firestoreConnected),
        ),
        ChangeNotifierProvider(create: (_) => CartProvider()),
      ],
      child: MaterialApp(
        debugShowCheckedModeBanner: false,
        title: 'Tienda de Mascotas',
        theme: ThemeData(
          primarySwatch: Colors.blue,
          visualDensity: VisualDensity.adaptivePlatformDensity,
        ),
        home: WelcomeScreen(firestoreConnected: firestoreConnected),
        routes: {
          '/home': (context) => const HomeScreen(),
          '/inventory': (context) => const InventoryScreen(),
          '/animal_menu': (context) => const AnimalMenuScreen(),
          '/cart': (context) => const CartScreen(),
        },
      ),
    );
  }
}

class WelcomeScreen extends StatelessWidget {
  final bool firestoreConnected;
  
  const WelcomeScreen({super.key, required this.firestoreConnected});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Tienda de Mascotas'),
        actions: [
          Tooltip(
            message: firestoreConnected 
              ? 'Conectado a Firebase' 
              : 'Modo offline - Sin conexión a Firebase',
            child: Icon(
              firestoreConnected ? Icons.cloud_done : Icons.cloud_off,
              color: firestoreConnected ? Colors.green : Colors.orange,
            ),
          ),
          const SizedBox(width: 16),
        ],
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const FlutterLogo(size: 100),
            const SizedBox(height: 32),
            Text(
              'Bienvenido a la Tienda de Mascotas',
              style: Theme.of(context).textTheme.headlineSmall,
            ),
            const SizedBox(height: 16),
            Text(
              firestoreConnected
                ? 'Estado: Conectado a la nube'
                : 'Estado: Usando datos locales',
              style: TextStyle(
                color: firestoreConnected ? Colors.green : Colors.orange,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 32),
            ElevatedButton(
              onPressed: () {
                Navigator.pushNamed(context, '/home');
              },
              style: ElevatedButton.styleFrom(
                padding: const EdgeInsets.symmetric(horizontal: 40, vertical: 16),
              ),
              child: const Text('Iniciar', style: TextStyle(fontSize: 18)),
            ),
          ],
        ),
      ),
    );
  }
}

// Modelos y Providers
class Animal {
  final String id;
  final String name;
  final String breed;
  final int price;
  final String size;
  final String imageUrl;
  int quantity;

  Animal({
    required this.id,
    required this.name,
    required this.breed,
    required this.price,
    required this.size,
    required this.imageUrl,
    required this.quantity,
  });

  factory Animal.fromFirestore(DocumentSnapshot doc) {
    Map data = doc.data() as Map<String, dynamic>;
    return Animal(
      id: doc.id,
      name: data['name'] ?? 'Sin nombre',
      breed: data['breed'] ?? 'Sin raza',
      price: (data['price'] ?? 0).toInt(),
      size: data['size'] ?? 'Sin tamaño',
      imageUrl: data['imageUrl'] ?? '',
      quantity: (data['quantity'] ?? 0).toInt(),
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'name': name,
      'breed': breed,
      'price': price,
      'size': size,
      'imageUrl': imageUrl,
      'quantity': quantity,
      'last_update': FieldValue.serverTimestamp(),
    };
  }
}

class InventoryProvider with ChangeNotifier {
  final FirebaseFirestore _db = FirebaseFirestore.instance;
  final bool firestoreConnected;
  List<Animal> _animals = [];
  bool _isLoading = true;
  String _error = '';

  InventoryProvider({required this.firestoreConnected}) {
    _loadAnimals();
  }

  List<Animal> get animals => _animals;
  bool get isLoading => _isLoading;
  String get error => _error;

  Future<void> _loadAnimals() async {
    try {
      _isLoading = true;
      notifyListeners();

      if (firestoreConnected) {
        final snapshot = await _db.collection('animals').get();
        _animals = snapshot.docs.map((doc) => Animal.fromFirestore(doc)).toList();
        
        // Verificar que los datos se están obteniendo
        print('Datos obtenidos de Firestore: ${_animals.length} animales');
        for (var animal in _animals) {
          print('Animal: ${animal.name}, Cantidad: ${animal.quantity}');
        }
      } else {
        // Datos locales de ejemplo
        _animals = [
          Animal(
            id: '1',
            name: 'Gato',
            breed: 'Siamés',
            price: 250,
            size: 'Pequeño',
            imageUrl: 'lib/assets/gatito.jpeg',
            quantity: 8,
          ),
          Animal(
            id: '2',
            name: 'Perro',
            breed: 'Labrador',
            price: 350,
            size: 'Grande',
            imageUrl: 'lib/assets/perro.jpeg',
            quantity: 5,
          ),
        ];
        print('Usando datos locales: ${_animals.length} animales');
      }
      
      _error = '';
    } catch (e) {
      _error = 'Error cargando animales: $e';
      print(_error);
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  Future<void> updateAnimal(Animal updatedAnimal) async {
    try {
      if (firestoreConnected) {
        await _db.collection('animals').doc(updatedAnimal.id).update(updatedAnimal.toMap());
        print('Animal actualizado en Firestore: ${updatedAnimal.id}');
      }
      
      final index = _animals.indexWhere((a) => a.id == updatedAnimal.id);
      if (index != -1) {
        _animals[index] = updatedAnimal;
        notifyListeners();
      }
    } catch (e) {
      print('Error actualizando animal: $e');
      throw Exception('Error al actualizar');
    }
  }
}

class CartItem {
  final Animal animal;
  int quantity;

  CartItem({
    required this.animal,
    this.quantity = 1,
  });

  int get totalPrice => animal.price * quantity;
}

class CartProvider with ChangeNotifier {
  final List<CartItem> _items = [];

  List<CartItem> get items => _items;
  int get itemCount => _items.fold(0, (sum, item) => sum + item.quantity);
  int get totalPrice => _items.fold(0, (sum, item) => sum + item.totalPrice);

  void addToCart(Animal animal) {
    final existingIndex = _items.indexWhere((item) => item.animal.id == animal.id);
    
    if (existingIndex >= 0) {
      _items[existingIndex].quantity++;
    } else {
      _items.add(CartItem(animal: animal));
    }
    
    notifyListeners();
  }

  void removeFromCart(String animalId) {
    _items.removeWhere((item) => item.animal.id == animalId);
    notifyListeners();
  }

  void updateQuantity(String animalId, int newQuantity) {
    final index = _items.indexWhere((item) => item.animal.id == animalId);
    if (index != -1) {
      _items[index].quantity = newQuantity;
      notifyListeners();
    }
  }

  void clearCart() {
    _items.clear();
    notifyListeners();
  }
}

class HomeScreen extends StatelessWidget {
  const HomeScreen({super.key});

  void _showPasswordDialog(BuildContext context, String route) {
    final passwordMap = {
      '/inventory': 'admin123',  // Contraseña para inventario
      '/animal_menu': 'user456', // Contraseña para tienda
    };

    final TextEditingController controller = TextEditingController();
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Ingrese contraseña'),
        content: TextField(
          controller: controller,
          obscureText: true,
          decoration: const InputDecoration(hintText: 'Contraseña'),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancelar'),
          ),
          TextButton(
            onPressed: () {
              if (controller.text == passwordMap[route]) {
                Navigator.pop(context);
                Navigator.pushNamed(context, route);
              } else {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('Contraseña incorrecta')),
                );
              }
            },
            child: const Text('Aceptar'),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Menú Principal')),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            ElevatedButton(
              onPressed: () => _showPasswordDialog(context, '/inventory'),
              child: const Text('Administrar Inventario (Admin)'),
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: () => _showPasswordDialog(context, '/animal_menu'),
              child: const Text('Tienda de Mascotas (Usuario)'),
            ),
          ],
        ),
      ),
    );
  }
}

class InventoryScreen extends StatelessWidget {
  const InventoryScreen({super.key});

  void _showEditDialog(BuildContext context, Animal animal, InventoryProvider inventory) {
    final TextEditingController nameController = TextEditingController(text: animal.name);
    final TextEditingController breedController = TextEditingController(text: animal.breed);
    final TextEditingController priceController = TextEditingController(text: animal.price.toString());
    final TextEditingController quantityController = TextEditingController(text: animal.quantity.toString());
    final TextEditingController imageUrlController = TextEditingController(text: animal.imageUrl);

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Editar Animal'),
        content: SingleChildScrollView(
          child: Column(
            children: [
              TextField(controller: nameController, decoration: const InputDecoration(labelText: 'Nombre')),
              TextField(controller: breedController, decoration: const InputDecoration(labelText: 'Raza')),
              TextField(controller: priceController, decoration: const InputDecoration(labelText: 'Precio'), keyboardType: TextInputType.number),
              TextField(controller: quantityController, decoration: const InputDecoration(labelText: 'Cantidad'), keyboardType: TextInputType.number),
              TextField(controller: imageUrlController, decoration: const InputDecoration(labelText: 'URL de imagen')),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancelar'),
          ),
          TextButton(
            onPressed: () async {
              final updatedAnimal = Animal(
                id: animal.id,
                name: nameController.text,
                breed: breedController.text,
                price: int.tryParse(priceController.text) ?? animal.price,
                size: animal.size,
                imageUrl: imageUrlController.text,
                quantity: int.tryParse(quantityController.text) ?? animal.quantity,
              );
              
              try {
                await inventory.updateAnimal(updatedAnimal);
                Navigator.pop(context);
              } catch (e) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('Error al actualizar: $e')),
                );
              }
            },
            child: const Text('Guardar'),
          ),
        ],
      ),
    );
  }

  void _showAddDialog(BuildContext context, InventoryProvider inventory) {
    final TextEditingController nameController = TextEditingController();
    final TextEditingController breedController = TextEditingController();
    final TextEditingController priceController = TextEditingController();
    final TextEditingController quantityController = TextEditingController();
    final TextEditingController imageUrlController = TextEditingController();

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Agregar Animal'),
        content: SingleChildScrollView(
          child: Column(
            children: [
              TextField(controller: nameController, decoration: const InputDecoration(labelText: 'Nombre')),
              TextField(controller: breedController, decoration: const InputDecoration(labelText: 'Raza')),
              TextField(controller: priceController, decoration: const InputDecoration(labelText: 'Precio'), keyboardType: TextInputType.number),
              TextField(controller: quantityController, decoration: const InputDecoration(labelText: 'Cantidad'), keyboardType: TextInputType.number),
              TextField(controller: imageUrlController, decoration: const InputDecoration(labelText: 'URL de imagen')),
              DropdownButtonFormField<String>(
                items: ['Pequeño', 'Mediano', 'Grande'].map((size) => DropdownMenuItem(value: size, child: Text(size))).toList(),
                onChanged: (value) {},
                decoration: const InputDecoration(labelText: 'Tamaño'),
              ),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancelar'),
          ),
          TextButton(
            onPressed: () async {
              // Implementar lógica para agregar nuevo animal
              Navigator.pop(context);
            },
            child: const Text('Agregar'),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final inventory = Provider.of<InventoryProvider>(context);
    
    if (inventory.isLoading) {
      return const Center(child: CircularProgressIndicator());
    }
    
    if (inventory.error.isNotEmpty) {
      return Center(child: Text(inventory.error));
    }

    return Scaffold(
      appBar: AppBar(title: const Text('Inventario')),
      body: ListView.builder(
        itemCount: inventory.animals.length,
        itemBuilder: (context, index) {
          final animal = inventory.animals[index];
          return ListTile(
            leading: animal.imageUrl.isNotEmpty 
              ? Image.network(animal.imageUrl, width: 50, height: 50, fit: BoxFit.cover)
              : const Icon(Icons.pets),
            title: Text(animal.name),
            subtitle: Text('${animal.breed} - Stock: ${animal.quantity} | Precio: \$${animal.price}'),
            trailing: IconButton(
              icon: const Icon(Icons.edit),
              onPressed: () => _showEditDialog(context, animal, inventory),
            ),
          );
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () => _showAddDialog(context, inventory),
        child: const Icon(Icons.add),
      ),
    );
  }
}

class AnimalMenuScreen extends StatelessWidget {
  const AnimalMenuScreen({super.key});

  @override
  Widget build(BuildContext context) {
    final inventory = Provider.of<InventoryProvider>(context);
    final cart = Provider.of<CartProvider>(context);

    return Scaffold(
      appBar: AppBar(
        title: const Text('Tienda de Mascotas'),
        actions: [
          Stack(
            children: [
              IconButton(
                icon: const Icon(Icons.shopping_cart),
                onPressed: () => Navigator.pushNamed(context, '/cart'),
              ),
              if (cart.itemCount > 0)
                Positioned(
                  right: 8,
                  top: 8,
                  child: CircleAvatar(
                    radius: 10,
                    backgroundColor: Colors.red,
                    child: Text(
                      '${cart.itemCount}',
                      style: const TextStyle(fontSize: 12, color: Colors.white),
                    ),
                  ),
                ),
            ],
          ),
          const SizedBox(width: 16),
        ],
      ),
      body: inventory.isLoading
          ? const Center(child: CircularProgressIndicator())
          : inventory.animals.isEmpty
              ? const Center(child: Text('No hay animales disponibles'))
              : GridView.builder(
                  gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                    crossAxisCount: 2,
                    childAspectRatio: 0.8,
                  ),
                  itemCount: inventory.animals.length,
                  itemBuilder: (context, index) {
                    final animal = inventory.animals[index];
                    return Card(
                      elevation: 4,
                      margin: const EdgeInsets.all(8),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.stretch,
                        children: [
                          Expanded(
                            child: animal.imageUrl.isNotEmpty
                              ? Image.network(
                                  animal.imageUrl,
                                  fit: BoxFit.cover,
                                  errorBuilder: (context, error, stackTrace) => 
                                    const Icon(Icons.pets, size: 50),
                                )
                              : const Icon(Icons.pets, size: 50),
                          ),
                          Padding(
                            padding: const EdgeInsets.all(8.0),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  animal.name,
                                  style: const TextStyle(
                                    fontWeight: FontWeight.bold,
                                    fontSize: 16,
                                  ),
                                ),
                                Text(animal.breed),
                                Text(
                                  '\$${animal.price}',
                                  style: const TextStyle(
                                    fontWeight: FontWeight.bold,
                                    color: Colors.green,
                                  ),
                                ),
                                const SizedBox(height: 8),
                                ElevatedButton(
                                  onPressed: () {
                                    cart.addToCart(animal);
                                    ScaffoldMessenger.of(context).showSnackBar(
                                      SnackBar(
                                        content: Text('${animal.name} añadido al carrito'),
                                        duration: const Duration(seconds: 1),
                                      ),
                                    );
                                  },
                                  child: const Text('Agregar al carrito'),
                                ),
                              ],
                            ),
                          ),
                        ],
                      ),
                    );
                  },
                ),
    );
  }
}

class CartScreen extends StatelessWidget {
  const CartScreen({super.key});

  @override
  Widget build(BuildContext context) {
    final cart = Provider.of<CartProvider>(context);

    return Scaffold(
      appBar: AppBar(title: const Text('Carrito de Compras')),
      body: cart.items.isEmpty
          ? const Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(Icons.shopping_cart_outlined, size: 64, color: Colors.grey),
                  SizedBox(height: 16),
                  Text('El carrito está vacío'),
                ],
              ),
            )
          : Column(
              children: [
                Expanded(
                  child: ListView.builder(
                    itemCount: cart.items.length,
                    itemBuilder: (context, index) {
                      final item = cart.items[index];
                      return Dismissible(
                        key: Key(item.animal.id),
                        direction: DismissDirection.endToStart,
                        background: Container(
                          color: Colors.red,
                          alignment: Alignment.centerRight,
                          padding: const EdgeInsets.only(right: 20),
                          child: const Icon(Icons.delete, color: Colors.white),
                        ),
                        onDismissed: (direction) {
                          cart.removeFromCart(item.animal.id);
                        },
                        child: ListTile(
                          leading: item.animal.imageUrl.isNotEmpty
                            ? Image.network(item.animal.imageUrl, width: 50, height: 50, fit: BoxFit.cover)
                            : const Icon(Icons.pets),
                          title: Text(item.animal.name),
                          subtitle: Text('Precio unitario: \$${item.animal.price}'),
                          trailing: Column(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              Text(
                                '\$${item.totalPrice}',
                                style: const TextStyle(fontWeight: FontWeight.bold),
                              ),
                              Row(
                                mainAxisSize: MainAxisSize.min,
                                children: [
                                  IconButton(
                                    icon: const Icon(Icons.remove),
                                    onPressed: () {
                                      if (item.quantity > 1) {
                                        cart.updateQuantity(item.animal.id, item.quantity - 1);
                                      } else {
                                        cart.removeFromCart(item.animal.id);
                                      }
                                    },
                                  ),
                                  Text('${item.quantity}'),
                                  IconButton(
                                    icon: const Icon(Icons.add),
                                    onPressed: () {
                                      cart.updateQuantity(item.animal.id, item.quantity + 1);
                                    },
                                  ),
                                ],
                              ),
                            ],
                          ),
                        ),
                      );
                    },
                  ),
                ),
                Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Card(
                    elevation: 4,
                    child: Padding(
                      padding: const EdgeInsets.all(16.0),
                      child: Column(
                        children: [
                          Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              const Text(
                                'Total:',
                                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
                              ),
                              Text(
                                '\$${cart.totalPrice}',
                                style: const TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
                              ),
                            ],
                          ),
                          const SizedBox(height: 16),
                          SizedBox(
                            width: double.infinity,
                            child: ElevatedButton(
                              onPressed: () {
                                // Procesar compra
                                cart.clearCart();
                                ScaffoldMessenger.of(context).showSnackBar(
                                  const SnackBar(content: Text('Compra realizada con éxito')),
                                );
                              },
                              style: ElevatedButton.styleFrom(
                                padding: const EdgeInsets.symmetric(vertical: 16),
                              ),
                              child: const Text('Realizar Compra', style: TextStyle(fontSize: 18)),
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
              ],
            ),
    );
  }
}
